/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppToolsRouteImport } from './routes/app/tools/route'
import { Route as AppProductsRouteImport } from './routes/app/products/route'
import { Route as AppFaqRouteImport } from './routes/app/faq/route'
import { Route as AppExternalLinksRouteImport } from './routes/app/external-links/route'
import { Route as AppEnterprisesRouteImport } from './routes/app/enterprises/route'
import { Route as AppDashboardRouteImport } from './routes/app/dashboard/route'
import { Route as AppToolsVvaRouteImport } from './routes/app/tools/vva/route'
import { Route as AppToolsSchedulerRouteImport } from './routes/app/tools/scheduler/route'
import { Route as AppToolsRepresentativesTurnoverRouteImport } from './routes/app/tools/representatives-turnover/route'
import { Route as AppToolsRepresentativesMapRouteImport } from './routes/app/tools/representatives-map/route'
import { Route as AppToolsPredefinedTextsRouteImport } from './routes/app/tools/predefined-texts/route'
import { Route as AppToolsPredefinedMessagesRouteImport } from './routes/app/tools/predefined-messages/route'
import { Route as AppToolsNewsRouteImport } from './routes/app/tools/news/route'
import { Route as AppToolsGlobalTurnoverRouteImport } from './routes/app/tools/global-turnover/route'
import { Route as AppToolsExternalLinksRouteImport } from './routes/app/tools/external-links/route'
import { Route as AppToolsEmailsRouteImport } from './routes/app/tools/emails/route'
import { Route as AppToolsDdnsRouteImport } from './routes/app/tools/ddns/route'
import { Route as AppToolsCreditRouteImport } from './routes/app/tools/credit/route'
import { Route as AppProductsProductIdRouteImport } from './routes/app/products_.$productId/route'
import { Route as AppProductsSerialNumbersRouteImport } from './routes/app/products/serial-numbers/route'
import { Route as AppExternalLinksExternalLinkIdRouteImport } from './routes/app/external-links_.$externalLinkId/route'
import { Route as AppEnterprisesEnterpriseIdRouteImport } from './routes/app/enterprises_/$enterpriseId/route'
import { Route as AppDashboardDeleteCollectiveTasksRouteImport } from './routes/app/dashboard/delete-collective-tasks/route'
import { Route as AppDashboardCreatePersonalTaskRouteImport } from './routes/app/dashboard/create-personal-task/route'
import { Route as AppProductsProductIdIndexImport } from './routes/app/products_.$productId/index'
import { Route as AppToolsVvaCreateRouteImport } from './routes/app/tools/vva/create/route'
import { Route as AppToolsCreditDetailsRouteImport } from './routes/app/tools/credit/details/route'
import { Route as AppProductsProductIdManageRouteImport } from './routes/app/products_.$productId/manage/route'
import { Route as AppProductsProductIdInformationsRouteImport } from './routes/app/products_.$productId/informations/route'
import { Route as AppProductsSerialNumbersCreateRouteImport } from './routes/app/products/serial-numbers/create/route'
import { Route as AppFaqUpdateFaqIdRouteImport } from './routes/app/faq/update.$faqId/route'
import { Route as AppFaqSendByEmailFaqIdRouteImport } from './routes/app/faq/send-by-email.$faqId/route'
import { Route as AppFaqGedFaqIdRouteImport } from './routes/app/faq/ged.$faqId/route'
import { Route as AppFaqDeleteFaqIdRouteImport } from './routes/app/faq/delete.$faqId/route'
import { Route as AppFaqArchiveFaqIdRouteImport } from './routes/app/faq/archive.$faqId/route'
import { Route as AppEnterprisesEnterpriseIdUpdateRepresentativeRouteImport } from './routes/app/enterprises_/$enterpriseId/update-representative/route'
import { Route as AppEnterprisesEnterpriseIdUpdateCategoryRouteImport } from './routes/app/enterprises_/$enterpriseId/update-category/route'
import { Route as AppEnterprisesEnterpriseIdUpdateRouteImport } from './routes/app/enterprises_/$enterpriseId/update/route'
import { Route as AppEnterprisesEnterpriseIdImportGedFilesRouteImport } from './routes/app/enterprises_/$enterpriseId/import-ged-files/route'
import { Route as AppEnterprisesEnterpriseIdCreateGedDirectoryRouteImport } from './routes/app/enterprises_/$enterpriseId/create-ged-directory/route'
import { Route as AppEnterprisesEnterpriseIdAddressBookRouteImport } from './routes/app/enterprises_/$enterpriseId/address-book/route'
import { Route as AppEnterprisesUpdateContactContactIdRouteImport } from './routes/app/enterprises/update-contact.$contactId/route'
import { Route as AppEnterprisesUpdateContactPasswordContactIdRouteImport } from './routes/app/enterprises/update-contact-password.$contactId/route'
import { Route as AppEnterprisesSendEmailToContactContactIdRouteImport } from './routes/app/enterprises/send-email-to-contact.$contactId/route'
import { Route as AppEnterprisesDeleteContactContactIdRouteImport } from './routes/app/enterprises/delete-contact.$contactId/route'
import { Route as AppEnterprisesCreateEnterpriseRmaEnterpriseIdRouteImport } from './routes/app/enterprises/create-enterprise-rma.$enterpriseId/route'
import { Route as AppEnterprisesCreateContactEnterpriseIdRouteImport } from './routes/app/enterprises/create-contact.$enterpriseId/route'
import { Route as AppEnterprisesCreateContactTravelVoucherContactIdRouteImport } from './routes/app/enterprises/create-contact-travel-voucher.$contactId/route'
import { Route as AppEnterprisesCreateContactBusinessContactIdRouteImport } from './routes/app/enterprises/create-contact-business.$contactId/route'
import { Route as AppDashboardValidatePersonalTaskTaskIdRouteImport } from './routes/app/dashboard/validate-personal-task.$taskId/route'
import { Route as AppDashboardUpdateProgressiveInfoProgressiveInfoIdRouteImport } from './routes/app/dashboard/update-progressive-info.$progressiveInfoId/route'
import { Route as AppDashboardUpdatePersonalTaskDeadlineTaskIdRouteImport } from './routes/app/dashboard/update-personal-task-deadline.$taskId/route'
import { Route as AppDashboardTransferTaskTaskIdRouteImport } from './routes/app/dashboard/transfer-task.$taskId/route'
import { Route as AppDashboardTaskEmailTaskIdRouteImport } from './routes/app/dashboard/task-email.$taskId/route'
import { Route as AppDashboardTaskCommentsTaskIdRouteImport } from './routes/app/dashboard/task-comments.$taskId/route'
import { Route as AppDashboardTakeCollectiveTaskTaskIdRouteImport } from './routes/app/dashboard/take-collective-task.$taskId/route'
import { Route as AppDashboardSchedulerEventDetailsEventIdRouteImport } from './routes/app/dashboard/scheduler-event-details.$eventId/route'
import { Route as AppDashboardPersonalTaskDetailsTaskIdRouteImport } from './routes/app/dashboard/personal-task-details.$taskId/route'
import { Route as AppDashboardOtherPersonalTasksProfileIdRouteImport } from './routes/app/dashboard/other-personal-tasks.$profileId/route'
import { Route as AppDashboardLinkPersonalTaskTaskIdRouteImport } from './routes/app/dashboard/link-personal-task.$taskId/route'
import { Route as AppDashboardDeleteProgressiveInfoProgressiveInfoIdRouteImport } from './routes/app/dashboard/delete-progressive-info.$progressiveInfoId/route'
import { Route as AppDashboardDeleteCollectiveTaskTaskIdRouteImport } from './routes/app/dashboard/delete-collective-task.$taskId/route'
import { Route as AppDashboardArchivePersonalTaskTaskIdRouteImport } from './routes/app/dashboard/archive-personal-task.$taskId/route'
import { Route as AppToolsVvaDeleteVvaIdRouteImport } from './routes/app/tools/vva/delete.$vvaId/route'
import { Route as AppToolsPredefinedTextsUpdatePredefinedTextIdRouteImport } from './routes/app/tools/predefined-texts/update.$predefinedTextId/route'
import { Route as AppToolsPredefinedTextsDeletePredefinedTextIdRouteImport } from './routes/app/tools/predefined-texts/delete.$predefinedTextId/route'
import { Route as AppToolsNewsUpdateNewsIdRouteImport } from './routes/app/tools/news/update.$newsId/route'
import { Route as AppToolsNewsDeleteNewsIdRouteImport } from './routes/app/tools/news/delete.$newsId/route'
import { Route as AppToolsExternalLinksUpdateExternalLinkIdRouteImport } from './routes/app/tools/external-links/update.$externalLinkId/route'
import { Route as AppToolsExternalLinksDeleteExternalLinkIdRouteImport } from './routes/app/tools/external-links/delete.$externalLinkId/route'
import { Route as AppToolsExternalLinksArchiveExternalLinkIdRouteImport } from './routes/app/tools/external-links/archive.$externalLinkId/route'
import { Route as AppToolsEmailsSendPredefinedMessagesRouteImport } from './routes/app/tools/emails_.send/predefined-messages/route'
import { Route as AppToolsDdnsDeleteDdnsIdRouteImport } from './routes/app/tools/ddns/delete.$ddnsId/route'
import { Route as AppProductsProductIdManageCreateStockRouteImport } from './routes/app/products_.$productId/manage/create-stock/route'
import { Route as AppProductsProductIdManageAddSpecificationRouteImport } from './routes/app/products_.$productId/manage/add-specification/route'
import { Route as AppProductsProductIdManageAddAssociatedProductRouteImport } from './routes/app/products_.$productId/manage/add-associated-product/route'
import { Route as AppProductsProductIdInformationsRenameGedObjectRouteImport } from './routes/app/products_.$productId/informations/rename-ged-object/route'
import { Route as AppProductsProductIdInformationsImportGedFilesRouteImport } from './routes/app/products_.$productId/informations/import-ged-files/route'
import { Route as AppProductsProductIdInformationsDeleteGedObjectRouteImport } from './routes/app/products_.$productId/informations/delete-ged-object/route'
import { Route as AppProductsProductIdInformationsCreateLifesheetCommentRouteImport } from './routes/app/products_.$productId/informations/create-lifesheet-comment/route'
import { Route as AppProductsProductIdInformationsCreateGedDirectoryRouteImport } from './routes/app/products_.$productId/informations/create-ged-directory/route'
import { Route as AppProductsSerialNumbersDeleteSerialNumberIdRouteImport } from './routes/app/products/serial-numbers/delete.$serialNumberId/route'
import { Route as AppProductsSerialNumbersCreateRmaSerialNumberIdRouteImport } from './routes/app/products/serial-numbers/create-rma.$serialNumberId/route'
import { Route as AppFaqGedFaqIdImportFilesRouteImport } from './routes/app/faq/ged.$faqId/import-files/route'
import { Route as AppFaqGedFaqIdCreateDirectoryRouteImport } from './routes/app/faq/ged.$faqId/create-directory/route'
import { Route as AppEnterprisesEnterpriseIdUpdateContactContactIdRouteImport } from './routes/app/enterprises_/$enterpriseId/update-contact.$contactId/route'
import { Route as AppEnterprisesEnterpriseIdUpdateContactPasswordContactIdRouteImport } from './routes/app/enterprises_/$enterpriseId/update-contact-password.$contactId/route'
import { Route as AppEnterprisesEnterpriseIdSendEmailToContactContactIdRouteImport } from './routes/app/enterprises_/$enterpriseId/send-email-to-contact.$contactId/route'
import { Route as AppEnterprisesEnterpriseIdDeleteContactContactIdRouteImport } from './routes/app/enterprises_/$enterpriseId/delete-contact.$contactId/route'
import { Route as AppEnterprisesEnterpriseIdCreateContactBusinessContactIdRouteImport } from './routes/app/enterprises_/$enterpriseId/create-contact-business.$contactId/route'
import { Route as AppProductsProductIdManageUpdateVersionVersionIdRouteImport } from './routes/app/products_.$productId/manage/update-version.$versionId/route'
import { Route as AppProductsProductIdManageUpdateStockStockIdRouteImport } from './routes/app/products_.$productId/manage/update-stock.$stockId/route'
import { Route as AppProductsProductIdManageUpdateSpecificationSpecificationIdRouteImport } from './routes/app/products_.$productId/manage/update-specification.$specificationId/route'
import { Route as AppProductsProductIdManageStockHistoryStockIdRouteImport } from './routes/app/products_.$productId/manage/stock-history.$stockId/route'
import { Route as AppProductsProductIdManageRemoveAssociatedProductAssociatedProductIdRouteImport } from './routes/app/products_.$productId/manage/remove-associated-product.$associatedProductId/route'
import { Route as AppProductsProductIdManageDeleteVersionVersionIdRouteImport } from './routes/app/products_.$productId/manage/delete-version.$versionId/route'
import { Route as AppProductsProductIdManageDeleteStockStockIdRouteImport } from './routes/app/products_.$productId/manage/delete-stock.$stockId/route'
import { Route as AppProductsProductIdManageDeleteSpecificationSpecificationIdRouteImport } from './routes/app/products_.$productId/manage/delete-specification.$specificationId/route'
import { Route as AppProductsProductIdManageAddSpecificationFilterIdRouteImport } from './routes/app/products_.$productId/manage/add-specification/$filterId/route'
import { Route as AppProductsProductIdInformationsTaskEmailTaskIdRouteImport } from './routes/app/products_.$productId/informations/task-email.$taskId/route'
import { Route as AppEnterprisesEnterpriseIdAddressBookUpdateAddressIdRouteImport } from './routes/app/enterprises_/$enterpriseId/address-book/update.$addressId/route'
import { Route as AppEnterprisesEnterpriseIdAddressBookDeleteAddressIdRouteImport } from './routes/app/enterprises_/$enterpriseId/address-book/delete.$addressId/route'

// Create Virtual Routes

const AuthLoginRouteLazyImport = createFileRoute('/auth/login')()
const AuthForgotPasswordRouteLazyImport = createFileRoute(
  '/auth/forgot-password',
)()
const AuthResetPasswordTokenRouteLazyImport = createFileRoute(
  '/auth/reset-password/$token',
)()
const AppFaqCreateRouteLazyImport = createFileRoute('/app/faq/create')()
const AppDashboardCreateProgressiveInfoRouteLazyImport = createFileRoute(
  '/app/dashboard/create-progressive-info',
)()
const AppDashboardCreateCollectiveTaskRouteLazyImport = createFileRoute(
  '/app/dashboard/create-collective-task',
)()
const AppToolsSchedulerCreateRouteLazyImport = createFileRoute(
  '/app/tools/scheduler/create',
)()
const AppToolsPredefinedTextsCreateRouteLazyImport = createFileRoute(
  '/app/tools/predefined-texts/create',
)()
const AppToolsPredefinedMessagesCreateRouteLazyImport = createFileRoute(
  '/app/tools/predefined-messages/create',
)()
const AppToolsNewsCreateRouteLazyImport = createFileRoute(
  '/app/tools/news/create',
)()
const AppToolsExternalLinksCreateRouteLazyImport = createFileRoute(
  '/app/tools/external-links/create',
)()
const AppToolsEmailsSendRouteLazyImport = createFileRoute(
  '/app/tools/emails/send',
)()
const AppToolsEmailsEmailIdRouteLazyImport = createFileRoute(
  '/app/tools/emails/$emailId',
)()
const AppToolsDdnsCreateRouteLazyImport = createFileRoute(
  '/app/tools/ddns/create',
)()
const AppToolsCreditShowRouteLazyImport = createFileRoute(
  '/app/tools/credit/show',
)()
const AppEnterprisesEnterpriseIdUpdateAccountabilityRouteLazyImport =
  createFileRoute('/app/enterprises/$enterpriseId/update-accountability')()
const AppEnterprisesEnterpriseIdImportContactsRouteLazyImport = createFileRoute(
  '/app/enterprises/$enterpriseId/import-contacts',
)()
const AppEnterprisesEnterpriseIdDeleteRouteLazyImport = createFileRoute(
  '/app/enterprises/$enterpriseId/delete',
)()
const AppEnterprisesEnterpriseIdCreateLifesheetCommentRouteLazyImport =
  createFileRoute('/app/enterprises/$enterpriseId/create-lifesheet-comment')()
const AppEnterprisesEnterpriseIdCreateContactRouteLazyImport = createFileRoute(
  '/app/enterprises/$enterpriseId/create-contact',
)()
const AppToolsSchedulerDetailsRdvIdRouteLazyImport = createFileRoute(
  '/app/tools/scheduler/details/$rdvId',
)()
const AppToolsPredefinedMessagesUpdatePredefinedMessageIdRouteLazyImport =
  createFileRoute(
    '/app/tools/predefined-messages/update/$predefinedMessageId',
  )()
const AppToolsPredefinedMessagesDeletePredefinedMessageIdRouteLazyImport =
  createFileRoute(
    '/app/tools/predefined-messages/delete/$predefinedMessageId',
  )()
const AppToolsEmailsEmailIdReplyRouteLazyImport = createFileRoute(
  '/app/tools/emails/$emailId/reply',
)()
const AppProductsProductIdManageCreateVersionRouteLazyImport = createFileRoute(
  '/app/products/$productId/manage/create-version',
)()
const AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyImport =
  createFileRoute('/app/enterprises/$enterpriseId/task-email/$taskId')()
const AppEnterprisesEnterpriseIdRenameGedObjectObjectRelativePathRouteLazyImport =
  createFileRoute(
    '/app/enterprises/$enterpriseId/rename-ged-object/$objectRelativePath',
  )()
const AppEnterprisesEnterpriseIdDeleteGedObjectObjectRelativePathRouteLazyImport =
  createFileRoute(
    '/app/enterprises/$enterpriseId/delete-ged-object/$objectRelativePath',
  )()
const AppEnterprisesEnterpriseIdAddressBookCreateRouteLazyImport =
  createFileRoute('/app/enterprises/$enterpriseId/address-book/create')()
const AppDashboardTaskEmailTaskIdReplyRouteLazyImport = createFileRoute(
  '/app/dashboard/task-email/$taskId/reply',
)()
const AppToolsSchedulerDetailsRdvIdUpdateRouteLazyImport = createFileRoute(
  '/app/tools/scheduler/details/$rdvId/update',
)()
const AppToolsSchedulerDetailsRdvIdDeleteRouteLazyImport = createFileRoute(
  '/app/tools/scheduler/details/$rdvId/delete',
)()
const AppFaqGedFaqIdRenameItemRelativePathRouteLazyImport = createFileRoute(
  '/app/faq/ged/$faqId/rename/$itemRelativePath',
)()
const AppFaqGedFaqIdDeleteItemRelativePathRouteLazyImport = createFileRoute(
  '/app/faq/ged/$faqId/delete/$itemRelativePath',
)()
const AppEnterprisesEnterpriseIdTaskEmailTaskIdReplyRouteLazyImport =
  createFileRoute('/app/enterprises/$enterpriseId/task-email/$taskId/reply')()
const AppProductsProductIdInformationsTaskEmailTaskIdReplyRouteLazyImport =
  createFileRoute(
    '/app/products/$productId/informations/task-email/$taskId/reply',
  )()

// Create/Update Routes

const AuthRouteRoute = AuthRouteImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/route.lazy').then((d) => d.Route))

const AppRouteRoute = AppRouteImport.update({
  path: '/app',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/app/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AuthLoginRouteLazyRoute = AuthLoginRouteLazyImport.update({
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/auth/login/route.lazy').then((d) => d.Route),
)

const AuthForgotPasswordRouteLazyRoute =
  AuthForgotPasswordRouteLazyImport.update({
    path: '/forgot-password',
    getParentRoute: () => AuthRouteRoute,
  } as any).lazy(() =>
    import('./routes/auth/forgot-password/route.lazy').then((d) => d.Route),
  )

const AppToolsRouteRoute = AppToolsRouteImport.update({
  path: '/tools',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProductsRouteRoute = AppProductsRouteImport.update({
  path: '/products',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/products/route.lazy').then((d) => d.Route),
)

const AppFaqRouteRoute = AppFaqRouteImport.update({
  path: '/faq',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() => import('./routes/app/faq/route.lazy').then((d) => d.Route))

const AppExternalLinksRouteRoute = AppExternalLinksRouteImport.update({
  path: '/external-links',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/external-links/route.lazy').then((d) => d.Route),
)

const AppEnterprisesRouteRoute = AppEnterprisesRouteImport.update({
  path: '/enterprises',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/enterprises/route.lazy').then((d) => d.Route),
)

const AppDashboardRouteRoute = AppDashboardRouteImport.update({
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/dashboard/route.lazy').then((d) => d.Route),
)

const AuthResetPasswordTokenRouteLazyRoute =
  AuthResetPasswordTokenRouteLazyImport.update({
    path: '/reset-password/$token',
    getParentRoute: () => AuthRouteRoute,
  } as any).lazy(() =>
    import('./routes/auth/reset-password.$token/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppFaqCreateRouteLazyRoute = AppFaqCreateRouteLazyImport.update({
  path: '/create',
  getParentRoute: () => AppFaqRouteRoute,
} as any).lazy(() =>
  import('./routes/app/faq/create/route.lazy').then((d) => d.Route),
)

const AppDashboardCreateProgressiveInfoRouteLazyRoute =
  AppDashboardCreateProgressiveInfoRouteLazyImport.update({
    path: '/create-progressive-info',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/create-progressive-info/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardCreateCollectiveTaskRouteLazyRoute =
  AppDashboardCreateCollectiveTaskRouteLazyImport.update({
    path: '/create-collective-task',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/create-collective-task/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsVvaRouteRoute = AppToolsVvaRouteImport.update({
  path: '/vva',
  getParentRoute: () => AppToolsRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/vva/route.lazy').then((d) => d.Route),
)

const AppToolsSchedulerRouteRoute = AppToolsSchedulerRouteImport.update({
  path: '/scheduler',
  getParentRoute: () => AppToolsRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/scheduler/route.lazy').then((d) => d.Route),
)

const AppToolsRepresentativesTurnoverRouteRoute =
  AppToolsRepresentativesTurnoverRouteImport.update({
    path: '/representatives-turnover',
    getParentRoute: () => AppToolsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/representatives-turnover/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsRepresentativesMapRouteRoute =
  AppToolsRepresentativesMapRouteImport.update({
    path: '/representatives-map',
    getParentRoute: () => AppToolsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/representatives-map/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsPredefinedTextsRouteRoute =
  AppToolsPredefinedTextsRouteImport.update({
    path: '/predefined-texts',
    getParentRoute: () => AppToolsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/predefined-texts/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsPredefinedMessagesRouteRoute =
  AppToolsPredefinedMessagesRouteImport.update({
    path: '/predefined-messages',
    getParentRoute: () => AppToolsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/predefined-messages/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsNewsRouteRoute = AppToolsNewsRouteImport.update({
  path: '/news',
  getParentRoute: () => AppToolsRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/news/route.lazy').then((d) => d.Route),
)

const AppToolsGlobalTurnoverRouteRoute =
  AppToolsGlobalTurnoverRouteImport.update({
    path: '/global-turnover',
    getParentRoute: () => AppToolsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/global-turnover/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsExternalLinksRouteRoute = AppToolsExternalLinksRouteImport.update(
  {
    path: '/external-links',
    getParentRoute: () => AppToolsRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/app/tools/external-links/route.lazy').then((d) => d.Route),
)

const AppToolsEmailsRouteRoute = AppToolsEmailsRouteImport.update({
  path: '/emails',
  getParentRoute: () => AppToolsRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/emails/route.lazy').then((d) => d.Route),
)

const AppToolsDdnsRouteRoute = AppToolsDdnsRouteImport.update({
  path: '/ddns',
  getParentRoute: () => AppToolsRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/ddns/route.lazy').then((d) => d.Route),
)

const AppToolsCreditRouteRoute = AppToolsCreditRouteImport.update({
  path: '/credit',
  getParentRoute: () => AppToolsRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/credit/route.lazy').then((d) => d.Route),
)

const AppProductsProductIdRouteRoute = AppProductsProductIdRouteImport.update({
  path: '/products/$productId',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/products_.$productId/route.lazy').then((d) => d.Route),
)

const AppProductsSerialNumbersRouteRoute =
  AppProductsSerialNumbersRouteImport.update({
    path: '/serial-numbers',
    getParentRoute: () => AppProductsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/products/serial-numbers/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppExternalLinksExternalLinkIdRouteRoute =
  AppExternalLinksExternalLinkIdRouteImport.update({
    path: '/external-links/$externalLinkId',
    getParentRoute: () => AppRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/external-links_.$externalLinkId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppEnterprisesEnterpriseIdRouteRoute =
  AppEnterprisesEnterpriseIdRouteImport.update({
    path: '/enterprises/$enterpriseId',
    getParentRoute: () => AppRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/enterprises_/$enterpriseId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardDeleteCollectiveTasksRouteRoute =
  AppDashboardDeleteCollectiveTasksRouteImport.update({
    path: '/delete-collective-tasks',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/delete-collective-tasks/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardCreatePersonalTaskRouteRoute =
  AppDashboardCreatePersonalTaskRouteImport.update({
    path: '/create-personal-task',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/create-personal-task/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppProductsProductIdIndexRoute = AppProductsProductIdIndexImport.update({
  path: '/',
  getParentRoute: () => AppProductsProductIdRouteRoute,
} as any)

const AppToolsSchedulerCreateRouteLazyRoute =
  AppToolsSchedulerCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppToolsSchedulerRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/scheduler/create/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsPredefinedTextsCreateRouteLazyRoute =
  AppToolsPredefinedTextsCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppToolsPredefinedTextsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/predefined-texts/create/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsPredefinedMessagesCreateRouteLazyRoute =
  AppToolsPredefinedMessagesCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppToolsPredefinedMessagesRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/predefined-messages/create/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsNewsCreateRouteLazyRoute =
  AppToolsNewsCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppToolsNewsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/news/create/route.lazy').then((d) => d.Route),
  )

const AppToolsExternalLinksCreateRouteLazyRoute =
  AppToolsExternalLinksCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppToolsExternalLinksRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/external-links/create/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsEmailsSendRouteLazyRoute =
  AppToolsEmailsSendRouteLazyImport.update({
    path: '/emails/send',
    getParentRoute: () => AppToolsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/emails_.send/route.lazy').then((d) => d.Route),
  )

const AppToolsEmailsEmailIdRouteLazyRoute =
  AppToolsEmailsEmailIdRouteLazyImport.update({
    path: '/$emailId',
    getParentRoute: () => AppToolsEmailsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/emails/$emailId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsDdnsCreateRouteLazyRoute =
  AppToolsDdnsCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppToolsDdnsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/ddns/create/route.lazy').then((d) => d.Route),
  )

const AppToolsCreditShowRouteLazyRoute =
  AppToolsCreditShowRouteLazyImport.update({
    path: '/show',
    getParentRoute: () => AppToolsCreditRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/credit/show/route.lazy').then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdUpdateAccountabilityRouteLazyRoute =
  AppEnterprisesEnterpriseIdUpdateAccountabilityRouteLazyImport.update({
    path: '/update-accountability',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/update-accountability/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdImportContactsRouteLazyRoute =
  AppEnterprisesEnterpriseIdImportContactsRouteLazyImport.update({
    path: '/import-contacts',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/import-contacts/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdDeleteRouteLazyRoute =
  AppEnterprisesEnterpriseIdDeleteRouteLazyImport.update({
    path: '/delete',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/enterprises_/$enterpriseId/delete/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppEnterprisesEnterpriseIdCreateLifesheetCommentRouteLazyRoute =
  AppEnterprisesEnterpriseIdCreateLifesheetCommentRouteLazyImport.update({
    path: '/create-lifesheet-comment',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/create-lifesheet-comment/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdCreateContactRouteLazyRoute =
  AppEnterprisesEnterpriseIdCreateContactRouteLazyImport.update({
    path: '/create-contact',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/create-contact/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsVvaCreateRouteRoute = AppToolsVvaCreateRouteImport.update({
  path: '/create',
  getParentRoute: () => AppToolsVvaRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tools/vva/create/route.lazy').then((d) => d.Route),
)

const AppToolsCreditDetailsRouteRoute = AppToolsCreditDetailsRouteImport.update(
  {
    path: '/details',
    getParentRoute: () => AppToolsCreditRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/app/tools/credit/details/route.lazy').then((d) => d.Route),
)

const AppProductsProductIdManageRouteRoute =
  AppProductsProductIdManageRouteImport.update({
    path: '/manage',
    getParentRoute: () => AppProductsProductIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/products_.$productId/manage/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppProductsProductIdInformationsRouteRoute =
  AppProductsProductIdInformationsRouteImport.update({
    path: '/informations',
    getParentRoute: () => AppProductsProductIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/products_.$productId/informations/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppProductsSerialNumbersCreateRouteRoute =
  AppProductsSerialNumbersCreateRouteImport.update({
    path: '/create',
    getParentRoute: () => AppProductsSerialNumbersRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/products/serial-numbers/create/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppFaqUpdateFaqIdRouteRoute = AppFaqUpdateFaqIdRouteImport.update({
  path: '/update/$faqId',
  getParentRoute: () => AppFaqRouteRoute,
} as any).lazy(() =>
  import('./routes/app/faq/update.$faqId/route.lazy').then((d) => d.Route),
)

const AppFaqSendByEmailFaqIdRouteRoute =
  AppFaqSendByEmailFaqIdRouteImport.update({
    path: '/send-by-email/$faqId',
    getParentRoute: () => AppFaqRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/faq/send-by-email.$faqId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppFaqGedFaqIdRouteRoute = AppFaqGedFaqIdRouteImport.update({
  path: '/ged/$faqId',
  getParentRoute: () => AppFaqRouteRoute,
} as any).lazy(() =>
  import('./routes/app/faq/ged.$faqId/route.lazy').then((d) => d.Route),
)

const AppFaqDeleteFaqIdRouteRoute = AppFaqDeleteFaqIdRouteImport.update({
  path: '/delete/$faqId',
  getParentRoute: () => AppFaqRouteRoute,
} as any).lazy(() =>
  import('./routes/app/faq/delete.$faqId/route.lazy').then((d) => d.Route),
)

const AppFaqArchiveFaqIdRouteRoute = AppFaqArchiveFaqIdRouteImport.update({
  path: '/archive/$faqId',
  getParentRoute: () => AppFaqRouteRoute,
} as any).lazy(() =>
  import('./routes/app/faq/archive.$faqId/route.lazy').then((d) => d.Route),
)

const AppEnterprisesEnterpriseIdUpdateRepresentativeRouteRoute =
  AppEnterprisesEnterpriseIdUpdateRepresentativeRouteImport.update({
    path: '/update-representative',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/update-representative/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdUpdateCategoryRouteRoute =
  AppEnterprisesEnterpriseIdUpdateCategoryRouteImport.update({
    path: '/update-category',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/update-category/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdUpdateRouteRoute =
  AppEnterprisesEnterpriseIdUpdateRouteImport.update({
    path: '/update',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/enterprises_/$enterpriseId/update/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppEnterprisesEnterpriseIdImportGedFilesRouteRoute =
  AppEnterprisesEnterpriseIdImportGedFilesRouteImport.update({
    path: '/import-ged-files',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/import-ged-files/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdCreateGedDirectoryRouteRoute =
  AppEnterprisesEnterpriseIdCreateGedDirectoryRouteImport.update({
    path: '/create-ged-directory',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/create-ged-directory/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdAddressBookRouteRoute =
  AppEnterprisesEnterpriseIdAddressBookRouteImport.update({
    path: '/address-book',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/address-book/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesUpdateContactContactIdRouteRoute =
  AppEnterprisesUpdateContactContactIdRouteImport.update({
    path: '/update-contact/$contactId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/update-contact.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesUpdateContactPasswordContactIdRouteRoute =
  AppEnterprisesUpdateContactPasswordContactIdRouteImport.update({
    path: '/update-contact-password/$contactId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/update-contact-password.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesSendEmailToContactContactIdRouteRoute =
  AppEnterprisesSendEmailToContactContactIdRouteImport.update({
    path: '/send-email-to-contact/$contactId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/send-email-to-contact.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesDeleteContactContactIdRouteRoute =
  AppEnterprisesDeleteContactContactIdRouteImport.update({
    path: '/delete-contact/$contactId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/delete-contact.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesCreateEnterpriseRmaEnterpriseIdRouteRoute =
  AppEnterprisesCreateEnterpriseRmaEnterpriseIdRouteImport.update({
    path: '/create-enterprise-rma/$enterpriseId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/create-enterprise-rma.$enterpriseId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesCreateContactEnterpriseIdRouteRoute =
  AppEnterprisesCreateContactEnterpriseIdRouteImport.update({
    path: '/create-contact/$enterpriseId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/create-contact.$enterpriseId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesCreateContactTravelVoucherContactIdRouteRoute =
  AppEnterprisesCreateContactTravelVoucherContactIdRouteImport.update({
    path: '/create-contact-travel-voucher/$contactId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/create-contact-travel-voucher.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesCreateContactBusinessContactIdRouteRoute =
  AppEnterprisesCreateContactBusinessContactIdRouteImport.update({
    path: '/create-contact-business/$contactId',
    getParentRoute: () => AppEnterprisesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises/create-contact-business.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardValidatePersonalTaskTaskIdRouteRoute =
  AppDashboardValidatePersonalTaskTaskIdRouteImport.update({
    path: '/validate-personal-task/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/validate-personal-task.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardUpdateProgressiveInfoProgressiveInfoIdRouteRoute =
  AppDashboardUpdateProgressiveInfoProgressiveInfoIdRouteImport.update({
    path: '/update-progressive-info/$progressiveInfoId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/update-progressive-info.$progressiveInfoId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardUpdatePersonalTaskDeadlineTaskIdRouteRoute =
  AppDashboardUpdatePersonalTaskDeadlineTaskIdRouteImport.update({
    path: '/update-personal-task-deadline/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/update-personal-task-deadline.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardTransferTaskTaskIdRouteRoute =
  AppDashboardTransferTaskTaskIdRouteImport.update({
    path: '/transfer-task/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/transfer-task.$taskId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardTaskEmailTaskIdRouteRoute =
  AppDashboardTaskEmailTaskIdRouteImport.update({
    path: '/task-email/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/task-email.$taskId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardTaskCommentsTaskIdRouteRoute =
  AppDashboardTaskCommentsTaskIdRouteImport.update({
    path: '/task-comments/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/task-comments.$taskId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardTakeCollectiveTaskTaskIdRouteRoute =
  AppDashboardTakeCollectiveTaskTaskIdRouteImport.update({
    path: '/take-collective-task/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/take-collective-task.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardSchedulerEventDetailsEventIdRouteRoute =
  AppDashboardSchedulerEventDetailsEventIdRouteImport.update({
    path: '/scheduler-event-details/$eventId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/scheduler-event-details.$eventId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardPersonalTaskDetailsTaskIdRouteRoute =
  AppDashboardPersonalTaskDetailsTaskIdRouteImport.update({
    path: '/personal-task-details/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/personal-task-details.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardOtherPersonalTasksProfileIdRouteRoute =
  AppDashboardOtherPersonalTasksProfileIdRouteImport.update({
    path: '/other-personal-tasks/$profileId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/other-personal-tasks.$profileId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardLinkPersonalTaskTaskIdRouteRoute =
  AppDashboardLinkPersonalTaskTaskIdRouteImport.update({
    path: '/link-personal-task/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/link-personal-task.$taskId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppDashboardDeleteProgressiveInfoProgressiveInfoIdRouteRoute =
  AppDashboardDeleteProgressiveInfoProgressiveInfoIdRouteImport.update({
    path: '/delete-progressive-info/$progressiveInfoId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/delete-progressive-info.$progressiveInfoId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardDeleteCollectiveTaskTaskIdRouteRoute =
  AppDashboardDeleteCollectiveTaskTaskIdRouteImport.update({
    path: '/delete-collective-task/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/delete-collective-task.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardArchivePersonalTaskTaskIdRouteRoute =
  AppDashboardArchivePersonalTaskTaskIdRouteImport.update({
    path: '/archive-personal-task/$taskId',
    getParentRoute: () => AppDashboardRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/dashboard/archive-personal-task.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsSchedulerDetailsRdvIdRouteLazyRoute =
  AppToolsSchedulerDetailsRdvIdRouteLazyImport.update({
    path: '/details/$rdvId',
    getParentRoute: () => AppToolsSchedulerRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/scheduler/details.$rdvId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsPredefinedMessagesUpdatePredefinedMessageIdRouteLazyRoute =
  AppToolsPredefinedMessagesUpdatePredefinedMessageIdRouteLazyImport.update({
    path: '/update/$predefinedMessageId',
    getParentRoute: () => AppToolsPredefinedMessagesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/predefined-messages/update.$predefinedMessageId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsPredefinedMessagesDeletePredefinedMessageIdRouteLazyRoute =
  AppToolsPredefinedMessagesDeletePredefinedMessageIdRouteLazyImport.update({
    path: '/delete/$predefinedMessageId',
    getParentRoute: () => AppToolsPredefinedMessagesRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/predefined-messages/delete.$predefinedMessageId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsEmailsEmailIdReplyRouteLazyRoute =
  AppToolsEmailsEmailIdReplyRouteLazyImport.update({
    path: '/reply',
    getParentRoute: () => AppToolsEmailsEmailIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/emails/$emailId/reply/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppProductsProductIdManageCreateVersionRouteLazyRoute =
  AppProductsProductIdManageCreateVersionRouteLazyImport.update({
    path: '/create-version',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/create-version/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyRoute =
  AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyImport.update({
    path: '/task-email/$taskId',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/task-email.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdRenameGedObjectObjectRelativePathRouteLazyRoute =
  AppEnterprisesEnterpriseIdRenameGedObjectObjectRelativePathRouteLazyImport.update(
    {
      path: '/rename-ged-object/$objectRelativePath',
      getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/rename-ged-object.$objectRelativePath/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdDeleteGedObjectObjectRelativePathRouteLazyRoute =
  AppEnterprisesEnterpriseIdDeleteGedObjectObjectRelativePathRouteLazyImport.update(
    {
      path: '/delete-ged-object/$objectRelativePath',
      getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/delete-ged-object.$objectRelativePath/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdAddressBookCreateRouteLazyRoute =
  AppEnterprisesEnterpriseIdAddressBookCreateRouteLazyImport.update({
    path: '/create',
    getParentRoute: () => AppEnterprisesEnterpriseIdAddressBookRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/address-book/create/route.lazy'
    ).then((d) => d.Route),
  )

const AppDashboardTaskEmailTaskIdReplyRouteLazyRoute =
  AppDashboardTaskEmailTaskIdReplyRouteLazyImport.update({
    path: '/reply',
    getParentRoute: () => AppDashboardTaskEmailTaskIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/dashboard/task-email.$taskId/reply/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsVvaDeleteVvaIdRouteRoute =
  AppToolsVvaDeleteVvaIdRouteImport.update({
    path: '/delete/$vvaId',
    getParentRoute: () => AppToolsVvaRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/vva/delete.$vvaId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsPredefinedTextsUpdatePredefinedTextIdRouteRoute =
  AppToolsPredefinedTextsUpdatePredefinedTextIdRouteImport.update({
    path: '/update/$predefinedTextId',
    getParentRoute: () => AppToolsPredefinedTextsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/predefined-texts/update.$predefinedTextId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsPredefinedTextsDeletePredefinedTextIdRouteRoute =
  AppToolsPredefinedTextsDeletePredefinedTextIdRouteImport.update({
    path: '/delete/$predefinedTextId',
    getParentRoute: () => AppToolsPredefinedTextsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/predefined-texts/delete.$predefinedTextId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsNewsUpdateNewsIdRouteRoute =
  AppToolsNewsUpdateNewsIdRouteImport.update({
    path: '/update/$newsId',
    getParentRoute: () => AppToolsNewsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/news/update.$newsId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsNewsDeleteNewsIdRouteRoute =
  AppToolsNewsDeleteNewsIdRouteImport.update({
    path: '/delete/$newsId',
    getParentRoute: () => AppToolsNewsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/news/delete.$newsId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppToolsExternalLinksUpdateExternalLinkIdRouteRoute =
  AppToolsExternalLinksUpdateExternalLinkIdRouteImport.update({
    path: '/update/$externalLinkId',
    getParentRoute: () => AppToolsExternalLinksRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/external-links/update.$externalLinkId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsExternalLinksDeleteExternalLinkIdRouteRoute =
  AppToolsExternalLinksDeleteExternalLinkIdRouteImport.update({
    path: '/delete/$externalLinkId',
    getParentRoute: () => AppToolsExternalLinksRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/external-links/delete.$externalLinkId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsExternalLinksArchiveExternalLinkIdRouteRoute =
  AppToolsExternalLinksArchiveExternalLinkIdRouteImport.update({
    path: '/archive/$externalLinkId',
    getParentRoute: () => AppToolsExternalLinksRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/external-links/archive.$externalLinkId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsEmailsSendPredefinedMessagesRouteRoute =
  AppToolsEmailsSendPredefinedMessagesRouteImport.update({
    path: '/predefined-messages',
    getParentRoute: () => AppToolsEmailsSendRouteLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/emails_.send/predefined-messages/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsDdnsDeleteDdnsIdRouteRoute =
  AppToolsDdnsDeleteDdnsIdRouteImport.update({
    path: '/delete/$ddnsId',
    getParentRoute: () => AppToolsDdnsRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/tools/ddns/delete.$ddnsId/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppProductsProductIdManageCreateStockRouteRoute =
  AppProductsProductIdManageCreateStockRouteImport.update({
    path: '/create-stock',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/create-stock/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageAddSpecificationRouteRoute =
  AppProductsProductIdManageAddSpecificationRouteImport.update({
    path: '/add-specification',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/add-specification/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageAddAssociatedProductRouteRoute =
  AppProductsProductIdManageAddAssociatedProductRouteImport.update({
    path: '/add-associated-product',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/add-associated-product/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsRenameGedObjectRouteRoute =
  AppProductsProductIdInformationsRenameGedObjectRouteImport.update({
    path: '/rename-ged-object',
    getParentRoute: () => AppProductsProductIdInformationsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/rename-ged-object/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsImportGedFilesRouteRoute =
  AppProductsProductIdInformationsImportGedFilesRouteImport.update({
    path: '/import-ged-files',
    getParentRoute: () => AppProductsProductIdInformationsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/import-ged-files/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsDeleteGedObjectRouteRoute =
  AppProductsProductIdInformationsDeleteGedObjectRouteImport.update({
    path: '/delete-ged-object',
    getParentRoute: () => AppProductsProductIdInformationsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/delete-ged-object/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsCreateLifesheetCommentRouteRoute =
  AppProductsProductIdInformationsCreateLifesheetCommentRouteImport.update({
    path: '/create-lifesheet-comment',
    getParentRoute: () => AppProductsProductIdInformationsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/create-lifesheet-comment/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsCreateGedDirectoryRouteRoute =
  AppProductsProductIdInformationsCreateGedDirectoryRouteImport.update({
    path: '/create-ged-directory',
    getParentRoute: () => AppProductsProductIdInformationsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/create-ged-directory/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsSerialNumbersDeleteSerialNumberIdRouteRoute =
  AppProductsSerialNumbersDeleteSerialNumberIdRouteImport.update({
    path: '/delete/$serialNumberId',
    getParentRoute: () => AppProductsSerialNumbersRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products/serial-numbers/delete.$serialNumberId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsSerialNumbersCreateRmaSerialNumberIdRouteRoute =
  AppProductsSerialNumbersCreateRmaSerialNumberIdRouteImport.update({
    path: '/create-rma/$serialNumberId',
    getParentRoute: () => AppProductsSerialNumbersRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products/serial-numbers/create-rma.$serialNumberId/route.lazy'
    ).then((d) => d.Route),
  )

const AppFaqGedFaqIdImportFilesRouteRoute =
  AppFaqGedFaqIdImportFilesRouteImport.update({
    path: '/import-files',
    getParentRoute: () => AppFaqGedFaqIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/faq/ged.$faqId/import-files/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppFaqGedFaqIdCreateDirectoryRouteRoute =
  AppFaqGedFaqIdCreateDirectoryRouteImport.update({
    path: '/create-directory',
    getParentRoute: () => AppFaqGedFaqIdRouteRoute,
  } as any).lazy(() =>
    import('./routes/app/faq/ged.$faqId/create-directory/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AppEnterprisesEnterpriseIdUpdateContactContactIdRouteRoute =
  AppEnterprisesEnterpriseIdUpdateContactContactIdRouteImport.update({
    path: '/update-contact/$contactId',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/update-contact.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdUpdateContactPasswordContactIdRouteRoute =
  AppEnterprisesEnterpriseIdUpdateContactPasswordContactIdRouteImport.update({
    path: '/update-contact-password/$contactId',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/update-contact-password.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdSendEmailToContactContactIdRouteRoute =
  AppEnterprisesEnterpriseIdSendEmailToContactContactIdRouteImport.update({
    path: '/send-email-to-contact/$contactId',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/send-email-to-contact.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdDeleteContactContactIdRouteRoute =
  AppEnterprisesEnterpriseIdDeleteContactContactIdRouteImport.update({
    path: '/delete-contact/$contactId',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/delete-contact.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdCreateContactBusinessContactIdRouteRoute =
  AppEnterprisesEnterpriseIdCreateContactBusinessContactIdRouteImport.update({
    path: '/create-contact-business/$contactId',
    getParentRoute: () => AppEnterprisesEnterpriseIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/create-contact-business.$contactId/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsSchedulerDetailsRdvIdUpdateRouteLazyRoute =
  AppToolsSchedulerDetailsRdvIdUpdateRouteLazyImport.update({
    path: '/update',
    getParentRoute: () => AppToolsSchedulerDetailsRdvIdRouteLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/scheduler/details.$rdvId/update/route.lazy'
    ).then((d) => d.Route),
  )

const AppToolsSchedulerDetailsRdvIdDeleteRouteLazyRoute =
  AppToolsSchedulerDetailsRdvIdDeleteRouteLazyImport.update({
    path: '/delete',
    getParentRoute: () => AppToolsSchedulerDetailsRdvIdRouteLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/app/tools/scheduler/details.$rdvId/delete/route.lazy'
    ).then((d) => d.Route),
  )

const AppFaqGedFaqIdRenameItemRelativePathRouteLazyRoute =
  AppFaqGedFaqIdRenameItemRelativePathRouteLazyImport.update({
    path: '/rename/$itemRelativePath',
    getParentRoute: () => AppFaqGedFaqIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/faq/ged.$faqId/rename.$itemRelativePath/route.lazy'
    ).then((d) => d.Route),
  )

const AppFaqGedFaqIdDeleteItemRelativePathRouteLazyRoute =
  AppFaqGedFaqIdDeleteItemRelativePathRouteLazyImport.update({
    path: '/delete/$itemRelativePath',
    getParentRoute: () => AppFaqGedFaqIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/faq/ged.$faqId/delete.$itemRelativePath/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdTaskEmailTaskIdReplyRouteLazyRoute =
  AppEnterprisesEnterpriseIdTaskEmailTaskIdReplyRouteLazyImport.update({
    path: '/reply',
    getParentRoute: () =>
      AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/task-email.$taskId/reply/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageUpdateVersionVersionIdRouteRoute =
  AppProductsProductIdManageUpdateVersionVersionIdRouteImport.update({
    path: '/update-version/$versionId',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/update-version.$versionId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageUpdateStockStockIdRouteRoute =
  AppProductsProductIdManageUpdateStockStockIdRouteImport.update({
    path: '/update-stock/$stockId',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/update-stock.$stockId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageUpdateSpecificationSpecificationIdRouteRoute =
  AppProductsProductIdManageUpdateSpecificationSpecificationIdRouteImport.update(
    {
      path: '/update-specification/$specificationId',
      getParentRoute: () => AppProductsProductIdManageRouteRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/update-specification.$specificationId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageStockHistoryStockIdRouteRoute =
  AppProductsProductIdManageStockHistoryStockIdRouteImport.update({
    path: '/stock-history/$stockId',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/stock-history.$stockId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageRemoveAssociatedProductAssociatedProductIdRouteRoute =
  AppProductsProductIdManageRemoveAssociatedProductAssociatedProductIdRouteImport.update(
    {
      path: '/remove-associated-product/$associatedProductId',
      getParentRoute: () => AppProductsProductIdManageRouteRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/remove-associated-product.$associatedProductId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageDeleteVersionVersionIdRouteRoute =
  AppProductsProductIdManageDeleteVersionVersionIdRouteImport.update({
    path: '/delete-version/$versionId',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/delete-version.$versionId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageDeleteStockStockIdRouteRoute =
  AppProductsProductIdManageDeleteStockStockIdRouteImport.update({
    path: '/delete-stock/$stockId',
    getParentRoute: () => AppProductsProductIdManageRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/delete-stock.$stockId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageDeleteSpecificationSpecificationIdRouteRoute =
  AppProductsProductIdManageDeleteSpecificationSpecificationIdRouteImport.update(
    {
      path: '/delete-specification/$specificationId',
      getParentRoute: () => AppProductsProductIdManageRouteRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/delete-specification.$specificationId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdManageAddSpecificationFilterIdRouteRoute =
  AppProductsProductIdManageAddSpecificationFilterIdRouteImport.update({
    path: '/$filterId',
    getParentRoute: () => AppProductsProductIdManageAddSpecificationRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/manage/add-specification/$filterId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsTaskEmailTaskIdRouteRoute =
  AppProductsProductIdInformationsTaskEmailTaskIdRouteImport.update({
    path: '/task-email/$taskId',
    getParentRoute: () => AppProductsProductIdInformationsRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/task-email.$taskId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdAddressBookUpdateAddressIdRouteRoute =
  AppEnterprisesEnterpriseIdAddressBookUpdateAddressIdRouteImport.update({
    path: '/update/$addressId',
    getParentRoute: () => AppEnterprisesEnterpriseIdAddressBookRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/address-book/update.$addressId/route.lazy'
    ).then((d) => d.Route),
  )

const AppEnterprisesEnterpriseIdAddressBookDeleteAddressIdRouteRoute =
  AppEnterprisesEnterpriseIdAddressBookDeleteAddressIdRouteImport.update({
    path: '/delete/$addressId',
    getParentRoute: () => AppEnterprisesEnterpriseIdAddressBookRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/enterprises_/$enterpriseId/address-book/delete.$addressId/route.lazy'
    ).then((d) => d.Route),
  )

const AppProductsProductIdInformationsTaskEmailTaskIdReplyRouteLazyRoute =
  AppProductsProductIdInformationsTaskEmailTaskIdReplyRouteLazyImport.update({
    path: '/reply',
    getParentRoute: () =>
      AppProductsProductIdInformationsTaskEmailTaskIdRouteRoute,
  } as any).lazy(() =>
    import(
      './routes/app/products_.$productId/informations/task-email.$taskId/reply/route.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/dashboard': {
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/enterprises': {
      preLoaderRoute: typeof AppEnterprisesRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/external-links': {
      preLoaderRoute: typeof AppExternalLinksRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/faq': {
      preLoaderRoute: typeof AppFaqRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/products': {
      preLoaderRoute: typeof AppProductsRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tools': {
      preLoaderRoute: typeof AppToolsRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/auth/forgot-password': {
      preLoaderRoute: typeof AuthForgotPasswordRouteLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/login': {
      preLoaderRoute: typeof AuthLoginRouteLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/app/': {
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/auth/': {
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/app/dashboard/create-personal-task': {
      preLoaderRoute: typeof AppDashboardCreatePersonalTaskRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/delete-collective-tasks': {
      preLoaderRoute: typeof AppDashboardDeleteCollectiveTasksRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/enterprises/$enterpriseId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/external-links/$externalLinkId': {
      preLoaderRoute: typeof AppExternalLinksExternalLinkIdRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/products/serial-numbers': {
      preLoaderRoute: typeof AppProductsSerialNumbersRouteImport
      parentRoute: typeof AppProductsRouteImport
    }
    '/app/products/$productId': {
      preLoaderRoute: typeof AppProductsProductIdRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tools/credit': {
      preLoaderRoute: typeof AppToolsCreditRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/ddns': {
      preLoaderRoute: typeof AppToolsDdnsRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/emails': {
      preLoaderRoute: typeof AppToolsEmailsRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/external-links': {
      preLoaderRoute: typeof AppToolsExternalLinksRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/global-turnover': {
      preLoaderRoute: typeof AppToolsGlobalTurnoverRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/news': {
      preLoaderRoute: typeof AppToolsNewsRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/predefined-messages': {
      preLoaderRoute: typeof AppToolsPredefinedMessagesRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/predefined-texts': {
      preLoaderRoute: typeof AppToolsPredefinedTextsRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/representatives-map': {
      preLoaderRoute: typeof AppToolsRepresentativesMapRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/representatives-turnover': {
      preLoaderRoute: typeof AppToolsRepresentativesTurnoverRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/scheduler': {
      preLoaderRoute: typeof AppToolsSchedulerRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/vva': {
      preLoaderRoute: typeof AppToolsVvaRouteImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/dashboard/create-collective-task': {
      preLoaderRoute: typeof AppDashboardCreateCollectiveTaskRouteLazyImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/create-progressive-info': {
      preLoaderRoute: typeof AppDashboardCreateProgressiveInfoRouteLazyImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/faq/create': {
      preLoaderRoute: typeof AppFaqCreateRouteLazyImport
      parentRoute: typeof AppFaqRouteImport
    }
    '/auth/reset-password/$token': {
      preLoaderRoute: typeof AuthResetPasswordTokenRouteLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/app/dashboard/archive-personal-task/$taskId': {
      preLoaderRoute: typeof AppDashboardArchivePersonalTaskTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/delete-collective-task/$taskId': {
      preLoaderRoute: typeof AppDashboardDeleteCollectiveTaskTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/delete-progressive-info/$progressiveInfoId': {
      preLoaderRoute: typeof AppDashboardDeleteProgressiveInfoProgressiveInfoIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/link-personal-task/$taskId': {
      preLoaderRoute: typeof AppDashboardLinkPersonalTaskTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/other-personal-tasks/$profileId': {
      preLoaderRoute: typeof AppDashboardOtherPersonalTasksProfileIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/personal-task-details/$taskId': {
      preLoaderRoute: typeof AppDashboardPersonalTaskDetailsTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/scheduler-event-details/$eventId': {
      preLoaderRoute: typeof AppDashboardSchedulerEventDetailsEventIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/take-collective-task/$taskId': {
      preLoaderRoute: typeof AppDashboardTakeCollectiveTaskTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/task-comments/$taskId': {
      preLoaderRoute: typeof AppDashboardTaskCommentsTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/task-email/$taskId': {
      preLoaderRoute: typeof AppDashboardTaskEmailTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/transfer-task/$taskId': {
      preLoaderRoute: typeof AppDashboardTransferTaskTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/update-personal-task-deadline/$taskId': {
      preLoaderRoute: typeof AppDashboardUpdatePersonalTaskDeadlineTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/update-progressive-info/$progressiveInfoId': {
      preLoaderRoute: typeof AppDashboardUpdateProgressiveInfoProgressiveInfoIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/dashboard/validate-personal-task/$taskId': {
      preLoaderRoute: typeof AppDashboardValidatePersonalTaskTaskIdRouteImport
      parentRoute: typeof AppDashboardRouteImport
    }
    '/app/enterprises/create-contact-business/$contactId': {
      preLoaderRoute: typeof AppEnterprisesCreateContactBusinessContactIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/create-contact-travel-voucher/$contactId': {
      preLoaderRoute: typeof AppEnterprisesCreateContactTravelVoucherContactIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/create-contact/$enterpriseId': {
      preLoaderRoute: typeof AppEnterprisesCreateContactEnterpriseIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/create-enterprise-rma/$enterpriseId': {
      preLoaderRoute: typeof AppEnterprisesCreateEnterpriseRmaEnterpriseIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/delete-contact/$contactId': {
      preLoaderRoute: typeof AppEnterprisesDeleteContactContactIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/send-email-to-contact/$contactId': {
      preLoaderRoute: typeof AppEnterprisesSendEmailToContactContactIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/update-contact-password/$contactId': {
      preLoaderRoute: typeof AppEnterprisesUpdateContactPasswordContactIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/update-contact/$contactId': {
      preLoaderRoute: typeof AppEnterprisesUpdateContactContactIdRouteImport
      parentRoute: typeof AppEnterprisesRouteImport
    }
    '/app/enterprises/$enterpriseId/address-book': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdAddressBookRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/create-ged-directory': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdCreateGedDirectoryRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/import-ged-files': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdImportGedFilesRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/update': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdUpdateRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/update-category': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdUpdateCategoryRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/update-representative': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdUpdateRepresentativeRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/faq/archive/$faqId': {
      preLoaderRoute: typeof AppFaqArchiveFaqIdRouteImport
      parentRoute: typeof AppFaqRouteImport
    }
    '/app/faq/delete/$faqId': {
      preLoaderRoute: typeof AppFaqDeleteFaqIdRouteImport
      parentRoute: typeof AppFaqRouteImport
    }
    '/app/faq/ged/$faqId': {
      preLoaderRoute: typeof AppFaqGedFaqIdRouteImport
      parentRoute: typeof AppFaqRouteImport
    }
    '/app/faq/send-by-email/$faqId': {
      preLoaderRoute: typeof AppFaqSendByEmailFaqIdRouteImport
      parentRoute: typeof AppFaqRouteImport
    }
    '/app/faq/update/$faqId': {
      preLoaderRoute: typeof AppFaqUpdateFaqIdRouteImport
      parentRoute: typeof AppFaqRouteImport
    }
    '/app/products/serial-numbers/create': {
      preLoaderRoute: typeof AppProductsSerialNumbersCreateRouteImport
      parentRoute: typeof AppProductsSerialNumbersRouteImport
    }
    '/app/products/$productId/informations': {
      preLoaderRoute: typeof AppProductsProductIdInformationsRouteImport
      parentRoute: typeof AppProductsProductIdRouteImport
    }
    '/app/products/$productId/manage': {
      preLoaderRoute: typeof AppProductsProductIdManageRouteImport
      parentRoute: typeof AppProductsProductIdRouteImport
    }
    '/app/tools/credit/details': {
      preLoaderRoute: typeof AppToolsCreditDetailsRouteImport
      parentRoute: typeof AppToolsCreditRouteImport
    }
    '/app/tools/vva/create': {
      preLoaderRoute: typeof AppToolsVvaCreateRouteImport
      parentRoute: typeof AppToolsVvaRouteImport
    }
    '/app/enterprises/$enterpriseId/create-contact': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdCreateContactRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/create-lifesheet-comment': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdCreateLifesheetCommentRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/delete': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdDeleteRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/import-contacts': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdImportContactsRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/update-accountability': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdUpdateAccountabilityRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/tools/credit/show': {
      preLoaderRoute: typeof AppToolsCreditShowRouteLazyImport
      parentRoute: typeof AppToolsCreditRouteImport
    }
    '/app/tools/ddns/create': {
      preLoaderRoute: typeof AppToolsDdnsCreateRouteLazyImport
      parentRoute: typeof AppToolsDdnsRouteImport
    }
    '/app/tools/emails/$emailId': {
      preLoaderRoute: typeof AppToolsEmailsEmailIdRouteLazyImport
      parentRoute: typeof AppToolsEmailsRouteImport
    }
    '/app/tools/emails/send': {
      preLoaderRoute: typeof AppToolsEmailsSendRouteLazyImport
      parentRoute: typeof AppToolsRouteImport
    }
    '/app/tools/external-links/create': {
      preLoaderRoute: typeof AppToolsExternalLinksCreateRouteLazyImport
      parentRoute: typeof AppToolsExternalLinksRouteImport
    }
    '/app/tools/news/create': {
      preLoaderRoute: typeof AppToolsNewsCreateRouteLazyImport
      parentRoute: typeof AppToolsNewsRouteImport
    }
    '/app/tools/predefined-messages/create': {
      preLoaderRoute: typeof AppToolsPredefinedMessagesCreateRouteLazyImport
      parentRoute: typeof AppToolsPredefinedMessagesRouteImport
    }
    '/app/tools/predefined-texts/create': {
      preLoaderRoute: typeof AppToolsPredefinedTextsCreateRouteLazyImport
      parentRoute: typeof AppToolsPredefinedTextsRouteImport
    }
    '/app/tools/scheduler/create': {
      preLoaderRoute: typeof AppToolsSchedulerCreateRouteLazyImport
      parentRoute: typeof AppToolsSchedulerRouteImport
    }
    '/app/products/$productId/': {
      preLoaderRoute: typeof AppProductsProductIdIndexImport
      parentRoute: typeof AppProductsProductIdRouteImport
    }
    '/app/enterprises/$enterpriseId/create-contact-business/$contactId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdCreateContactBusinessContactIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/delete-contact/$contactId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdDeleteContactContactIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/send-email-to-contact/$contactId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdSendEmailToContactContactIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/update-contact-password/$contactId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdUpdateContactPasswordContactIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/update-contact/$contactId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdUpdateContactContactIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/faq/ged/$faqId/create-directory': {
      preLoaderRoute: typeof AppFaqGedFaqIdCreateDirectoryRouteImport
      parentRoute: typeof AppFaqGedFaqIdRouteImport
    }
    '/app/faq/ged/$faqId/import-files': {
      preLoaderRoute: typeof AppFaqGedFaqIdImportFilesRouteImport
      parentRoute: typeof AppFaqGedFaqIdRouteImport
    }
    '/app/products/serial-numbers/create-rma/$serialNumberId': {
      preLoaderRoute: typeof AppProductsSerialNumbersCreateRmaSerialNumberIdRouteImport
      parentRoute: typeof AppProductsSerialNumbersRouteImport
    }
    '/app/products/serial-numbers/delete/$serialNumberId': {
      preLoaderRoute: typeof AppProductsSerialNumbersDeleteSerialNumberIdRouteImport
      parentRoute: typeof AppProductsSerialNumbersRouteImport
    }
    '/app/products/$productId/informations/create-ged-directory': {
      preLoaderRoute: typeof AppProductsProductIdInformationsCreateGedDirectoryRouteImport
      parentRoute: typeof AppProductsProductIdInformationsRouteImport
    }
    '/app/products/$productId/informations/create-lifesheet-comment': {
      preLoaderRoute: typeof AppProductsProductIdInformationsCreateLifesheetCommentRouteImport
      parentRoute: typeof AppProductsProductIdInformationsRouteImport
    }
    '/app/products/$productId/informations/delete-ged-object': {
      preLoaderRoute: typeof AppProductsProductIdInformationsDeleteGedObjectRouteImport
      parentRoute: typeof AppProductsProductIdInformationsRouteImport
    }
    '/app/products/$productId/informations/import-ged-files': {
      preLoaderRoute: typeof AppProductsProductIdInformationsImportGedFilesRouteImport
      parentRoute: typeof AppProductsProductIdInformationsRouteImport
    }
    '/app/products/$productId/informations/rename-ged-object': {
      preLoaderRoute: typeof AppProductsProductIdInformationsRenameGedObjectRouteImport
      parentRoute: typeof AppProductsProductIdInformationsRouteImport
    }
    '/app/products/$productId/manage/add-associated-product': {
      preLoaderRoute: typeof AppProductsProductIdManageAddAssociatedProductRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/add-specification': {
      preLoaderRoute: typeof AppProductsProductIdManageAddSpecificationRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/create-stock': {
      preLoaderRoute: typeof AppProductsProductIdManageCreateStockRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/tools/ddns/delete/$ddnsId': {
      preLoaderRoute: typeof AppToolsDdnsDeleteDdnsIdRouteImport
      parentRoute: typeof AppToolsDdnsRouteImport
    }
    '/app/tools/emails/send/predefined-messages': {
      preLoaderRoute: typeof AppToolsEmailsSendPredefinedMessagesRouteImport
      parentRoute: typeof AppToolsEmailsSendRouteLazyImport
    }
    '/app/tools/external-links/archive/$externalLinkId': {
      preLoaderRoute: typeof AppToolsExternalLinksArchiveExternalLinkIdRouteImport
      parentRoute: typeof AppToolsExternalLinksRouteImport
    }
    '/app/tools/external-links/delete/$externalLinkId': {
      preLoaderRoute: typeof AppToolsExternalLinksDeleteExternalLinkIdRouteImport
      parentRoute: typeof AppToolsExternalLinksRouteImport
    }
    '/app/tools/external-links/update/$externalLinkId': {
      preLoaderRoute: typeof AppToolsExternalLinksUpdateExternalLinkIdRouteImport
      parentRoute: typeof AppToolsExternalLinksRouteImport
    }
    '/app/tools/news/delete/$newsId': {
      preLoaderRoute: typeof AppToolsNewsDeleteNewsIdRouteImport
      parentRoute: typeof AppToolsNewsRouteImport
    }
    '/app/tools/news/update/$newsId': {
      preLoaderRoute: typeof AppToolsNewsUpdateNewsIdRouteImport
      parentRoute: typeof AppToolsNewsRouteImport
    }
    '/app/tools/predefined-texts/delete/$predefinedTextId': {
      preLoaderRoute: typeof AppToolsPredefinedTextsDeletePredefinedTextIdRouteImport
      parentRoute: typeof AppToolsPredefinedTextsRouteImport
    }
    '/app/tools/predefined-texts/update/$predefinedTextId': {
      preLoaderRoute: typeof AppToolsPredefinedTextsUpdatePredefinedTextIdRouteImport
      parentRoute: typeof AppToolsPredefinedTextsRouteImport
    }
    '/app/tools/vva/delete/$vvaId': {
      preLoaderRoute: typeof AppToolsVvaDeleteVvaIdRouteImport
      parentRoute: typeof AppToolsVvaRouteImport
    }
    '/app/dashboard/task-email/$taskId/reply': {
      preLoaderRoute: typeof AppDashboardTaskEmailTaskIdReplyRouteLazyImport
      parentRoute: typeof AppDashboardTaskEmailTaskIdRouteImport
    }
    '/app/enterprises/$enterpriseId/address-book/create': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdAddressBookCreateRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdAddressBookRouteImport
    }
    '/app/enterprises/$enterpriseId/delete-ged-object/$objectRelativePath': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdDeleteGedObjectObjectRelativePathRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/rename-ged-object/$objectRelativePath': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdRenameGedObjectObjectRelativePathRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/enterprises/$enterpriseId/task-email/$taskId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdRouteImport
    }
    '/app/products/$productId/manage/create-version': {
      preLoaderRoute: typeof AppProductsProductIdManageCreateVersionRouteLazyImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/tools/emails/$emailId/reply': {
      preLoaderRoute: typeof AppToolsEmailsEmailIdReplyRouteLazyImport
      parentRoute: typeof AppToolsEmailsEmailIdRouteLazyImport
    }
    '/app/tools/predefined-messages/delete/$predefinedMessageId': {
      preLoaderRoute: typeof AppToolsPredefinedMessagesDeletePredefinedMessageIdRouteLazyImport
      parentRoute: typeof AppToolsPredefinedMessagesRouteImport
    }
    '/app/tools/predefined-messages/update/$predefinedMessageId': {
      preLoaderRoute: typeof AppToolsPredefinedMessagesUpdatePredefinedMessageIdRouteLazyImport
      parentRoute: typeof AppToolsPredefinedMessagesRouteImport
    }
    '/app/tools/scheduler/details/$rdvId': {
      preLoaderRoute: typeof AppToolsSchedulerDetailsRdvIdRouteLazyImport
      parentRoute: typeof AppToolsSchedulerRouteImport
    }
    '/app/enterprises/$enterpriseId/address-book/delete/$addressId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdAddressBookDeleteAddressIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdAddressBookRouteImport
    }
    '/app/enterprises/$enterpriseId/address-book/update/$addressId': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdAddressBookUpdateAddressIdRouteImport
      parentRoute: typeof AppEnterprisesEnterpriseIdAddressBookRouteImport
    }
    '/app/products/$productId/informations/task-email/$taskId': {
      preLoaderRoute: typeof AppProductsProductIdInformationsTaskEmailTaskIdRouteImport
      parentRoute: typeof AppProductsProductIdInformationsRouteImport
    }
    '/app/products/$productId/manage/add-specification/$filterId': {
      preLoaderRoute: typeof AppProductsProductIdManageAddSpecificationFilterIdRouteImport
      parentRoute: typeof AppProductsProductIdManageAddSpecificationRouteImport
    }
    '/app/products/$productId/manage/delete-specification/$specificationId': {
      preLoaderRoute: typeof AppProductsProductIdManageDeleteSpecificationSpecificationIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/delete-stock/$stockId': {
      preLoaderRoute: typeof AppProductsProductIdManageDeleteStockStockIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/delete-version/$versionId': {
      preLoaderRoute: typeof AppProductsProductIdManageDeleteVersionVersionIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/remove-associated-product/$associatedProductId': {
      preLoaderRoute: typeof AppProductsProductIdManageRemoveAssociatedProductAssociatedProductIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/stock-history/$stockId': {
      preLoaderRoute: typeof AppProductsProductIdManageStockHistoryStockIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/update-specification/$specificationId': {
      preLoaderRoute: typeof AppProductsProductIdManageUpdateSpecificationSpecificationIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/update-stock/$stockId': {
      preLoaderRoute: typeof AppProductsProductIdManageUpdateStockStockIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/products/$productId/manage/update-version/$versionId': {
      preLoaderRoute: typeof AppProductsProductIdManageUpdateVersionVersionIdRouteImport
      parentRoute: typeof AppProductsProductIdManageRouteImport
    }
    '/app/enterprises/$enterpriseId/task-email/$taskId/reply': {
      preLoaderRoute: typeof AppEnterprisesEnterpriseIdTaskEmailTaskIdReplyRouteLazyImport
      parentRoute: typeof AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyImport
    }
    '/app/faq/ged/$faqId/delete/$itemRelativePath': {
      preLoaderRoute: typeof AppFaqGedFaqIdDeleteItemRelativePathRouteLazyImport
      parentRoute: typeof AppFaqGedFaqIdRouteImport
    }
    '/app/faq/ged/$faqId/rename/$itemRelativePath': {
      preLoaderRoute: typeof AppFaqGedFaqIdRenameItemRelativePathRouteLazyImport
      parentRoute: typeof AppFaqGedFaqIdRouteImport
    }
    '/app/tools/scheduler/details/$rdvId/delete': {
      preLoaderRoute: typeof AppToolsSchedulerDetailsRdvIdDeleteRouteLazyImport
      parentRoute: typeof AppToolsSchedulerDetailsRdvIdRouteLazyImport
    }
    '/app/tools/scheduler/details/$rdvId/update': {
      preLoaderRoute: typeof AppToolsSchedulerDetailsRdvIdUpdateRouteLazyImport
      parentRoute: typeof AppToolsSchedulerDetailsRdvIdRouteLazyImport
    }
    '/app/products/$productId/informations/task-email/$taskId/reply': {
      preLoaderRoute: typeof AppProductsProductIdInformationsTaskEmailTaskIdReplyRouteLazyImport
      parentRoute: typeof AppProductsProductIdInformationsTaskEmailTaskIdRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AppRouteRoute.addChildren([
    AppDashboardRouteRoute.addChildren([
      AppDashboardCreatePersonalTaskRouteRoute,
      AppDashboardDeleteCollectiveTasksRouteRoute,
      AppDashboardCreateCollectiveTaskRouteLazyRoute,
      AppDashboardCreateProgressiveInfoRouteLazyRoute,
      AppDashboardArchivePersonalTaskTaskIdRouteRoute,
      AppDashboardDeleteCollectiveTaskTaskIdRouteRoute,
      AppDashboardDeleteProgressiveInfoProgressiveInfoIdRouteRoute,
      AppDashboardLinkPersonalTaskTaskIdRouteRoute,
      AppDashboardOtherPersonalTasksProfileIdRouteRoute,
      AppDashboardPersonalTaskDetailsTaskIdRouteRoute,
      AppDashboardSchedulerEventDetailsEventIdRouteRoute,
      AppDashboardTakeCollectiveTaskTaskIdRouteRoute,
      AppDashboardTaskCommentsTaskIdRouteRoute,
      AppDashboardTaskEmailTaskIdRouteRoute.addChildren([
        AppDashboardTaskEmailTaskIdReplyRouteLazyRoute,
      ]),
      AppDashboardTransferTaskTaskIdRouteRoute,
      AppDashboardUpdatePersonalTaskDeadlineTaskIdRouteRoute,
      AppDashboardUpdateProgressiveInfoProgressiveInfoIdRouteRoute,
      AppDashboardValidatePersonalTaskTaskIdRouteRoute,
    ]),
    AppEnterprisesRouteRoute.addChildren([
      AppEnterprisesCreateContactBusinessContactIdRouteRoute,
      AppEnterprisesCreateContactTravelVoucherContactIdRouteRoute,
      AppEnterprisesCreateContactEnterpriseIdRouteRoute,
      AppEnterprisesCreateEnterpriseRmaEnterpriseIdRouteRoute,
      AppEnterprisesDeleteContactContactIdRouteRoute,
      AppEnterprisesSendEmailToContactContactIdRouteRoute,
      AppEnterprisesUpdateContactPasswordContactIdRouteRoute,
      AppEnterprisesUpdateContactContactIdRouteRoute,
    ]),
    AppExternalLinksRouteRoute,
    AppFaqRouteRoute.addChildren([
      AppFaqCreateRouteLazyRoute,
      AppFaqArchiveFaqIdRouteRoute,
      AppFaqDeleteFaqIdRouteRoute,
      AppFaqGedFaqIdRouteRoute.addChildren([
        AppFaqGedFaqIdCreateDirectoryRouteRoute,
        AppFaqGedFaqIdImportFilesRouteRoute,
        AppFaqGedFaqIdDeleteItemRelativePathRouteLazyRoute,
        AppFaqGedFaqIdRenameItemRelativePathRouteLazyRoute,
      ]),
      AppFaqSendByEmailFaqIdRouteRoute,
      AppFaqUpdateFaqIdRouteRoute,
    ]),
    AppProductsRouteRoute.addChildren([
      AppProductsSerialNumbersRouteRoute.addChildren([
        AppProductsSerialNumbersCreateRouteRoute,
        AppProductsSerialNumbersCreateRmaSerialNumberIdRouteRoute,
        AppProductsSerialNumbersDeleteSerialNumberIdRouteRoute,
      ]),
    ]),
    AppToolsRouteRoute.addChildren([
      AppToolsCreditRouteRoute.addChildren([
        AppToolsCreditDetailsRouteRoute,
        AppToolsCreditShowRouteLazyRoute,
      ]),
      AppToolsDdnsRouteRoute.addChildren([
        AppToolsDdnsCreateRouteLazyRoute,
        AppToolsDdnsDeleteDdnsIdRouteRoute,
      ]),
      AppToolsEmailsRouteRoute.addChildren([
        AppToolsEmailsEmailIdRouteLazyRoute.addChildren([
          AppToolsEmailsEmailIdReplyRouteLazyRoute,
        ]),
      ]),
      AppToolsExternalLinksRouteRoute.addChildren([
        AppToolsExternalLinksCreateRouteLazyRoute,
        AppToolsExternalLinksArchiveExternalLinkIdRouteRoute,
        AppToolsExternalLinksDeleteExternalLinkIdRouteRoute,
        AppToolsExternalLinksUpdateExternalLinkIdRouteRoute,
      ]),
      AppToolsGlobalTurnoverRouteRoute,
      AppToolsNewsRouteRoute.addChildren([
        AppToolsNewsCreateRouteLazyRoute,
        AppToolsNewsDeleteNewsIdRouteRoute,
        AppToolsNewsUpdateNewsIdRouteRoute,
      ]),
      AppToolsPredefinedMessagesRouteRoute.addChildren([
        AppToolsPredefinedMessagesCreateRouteLazyRoute,
        AppToolsPredefinedMessagesDeletePredefinedMessageIdRouteLazyRoute,
        AppToolsPredefinedMessagesUpdatePredefinedMessageIdRouteLazyRoute,
      ]),
      AppToolsPredefinedTextsRouteRoute.addChildren([
        AppToolsPredefinedTextsCreateRouteLazyRoute,
        AppToolsPredefinedTextsDeletePredefinedTextIdRouteRoute,
        AppToolsPredefinedTextsUpdatePredefinedTextIdRouteRoute,
      ]),
      AppToolsRepresentativesMapRouteRoute,
      AppToolsRepresentativesTurnoverRouteRoute,
      AppToolsSchedulerRouteRoute.addChildren([
        AppToolsSchedulerCreateRouteLazyRoute,
        AppToolsSchedulerDetailsRdvIdRouteLazyRoute.addChildren([
          AppToolsSchedulerDetailsRdvIdDeleteRouteLazyRoute,
          AppToolsSchedulerDetailsRdvIdUpdateRouteLazyRoute,
        ]),
      ]),
      AppToolsVvaRouteRoute.addChildren([
        AppToolsVvaCreateRouteRoute,
        AppToolsVvaDeleteVvaIdRouteRoute,
      ]),
      AppToolsEmailsSendRouteLazyRoute.addChildren([
        AppToolsEmailsSendPredefinedMessagesRouteRoute,
      ]),
    ]),
    AppIndexRoute,
    AppEnterprisesEnterpriseIdRouteRoute.addChildren([
      AppEnterprisesEnterpriseIdAddressBookRouteRoute.addChildren([
        AppEnterprisesEnterpriseIdAddressBookCreateRouteLazyRoute,
        AppEnterprisesEnterpriseIdAddressBookDeleteAddressIdRouteRoute,
        AppEnterprisesEnterpriseIdAddressBookUpdateAddressIdRouteRoute,
      ]),
      AppEnterprisesEnterpriseIdCreateGedDirectoryRouteRoute,
      AppEnterprisesEnterpriseIdImportGedFilesRouteRoute,
      AppEnterprisesEnterpriseIdUpdateRouteRoute,
      AppEnterprisesEnterpriseIdUpdateCategoryRouteRoute,
      AppEnterprisesEnterpriseIdUpdateRepresentativeRouteRoute,
      AppEnterprisesEnterpriseIdCreateContactRouteLazyRoute,
      AppEnterprisesEnterpriseIdCreateLifesheetCommentRouteLazyRoute,
      AppEnterprisesEnterpriseIdDeleteRouteLazyRoute,
      AppEnterprisesEnterpriseIdImportContactsRouteLazyRoute,
      AppEnterprisesEnterpriseIdUpdateAccountabilityRouteLazyRoute,
      AppEnterprisesEnterpriseIdCreateContactBusinessContactIdRouteRoute,
      AppEnterprisesEnterpriseIdDeleteContactContactIdRouteRoute,
      AppEnterprisesEnterpriseIdSendEmailToContactContactIdRouteRoute,
      AppEnterprisesEnterpriseIdUpdateContactPasswordContactIdRouteRoute,
      AppEnterprisesEnterpriseIdUpdateContactContactIdRouteRoute,
      AppEnterprisesEnterpriseIdDeleteGedObjectObjectRelativePathRouteLazyRoute,
      AppEnterprisesEnterpriseIdRenameGedObjectObjectRelativePathRouteLazyRoute,
      AppEnterprisesEnterpriseIdTaskEmailTaskIdRouteLazyRoute.addChildren([
        AppEnterprisesEnterpriseIdTaskEmailTaskIdReplyRouteLazyRoute,
      ]),
    ]),
    AppExternalLinksExternalLinkIdRouteRoute,
    AppProductsProductIdRouteRoute.addChildren([
      AppProductsProductIdInformationsRouteRoute.addChildren([
        AppProductsProductIdInformationsCreateGedDirectoryRouteRoute,
        AppProductsProductIdInformationsCreateLifesheetCommentRouteRoute,
        AppProductsProductIdInformationsDeleteGedObjectRouteRoute,
        AppProductsProductIdInformationsImportGedFilesRouteRoute,
        AppProductsProductIdInformationsRenameGedObjectRouteRoute,
        AppProductsProductIdInformationsTaskEmailTaskIdRouteRoute.addChildren([
          AppProductsProductIdInformationsTaskEmailTaskIdReplyRouteLazyRoute,
        ]),
      ]),
      AppProductsProductIdManageRouteRoute.addChildren([
        AppProductsProductIdManageAddAssociatedProductRouteRoute,
        AppProductsProductIdManageAddSpecificationRouteRoute.addChildren([
          AppProductsProductIdManageAddSpecificationFilterIdRouteRoute,
        ]),
        AppProductsProductIdManageCreateStockRouteRoute,
        AppProductsProductIdManageCreateVersionRouteLazyRoute,
        AppProductsProductIdManageDeleteSpecificationSpecificationIdRouteRoute,
        AppProductsProductIdManageDeleteStockStockIdRouteRoute,
        AppProductsProductIdManageDeleteVersionVersionIdRouteRoute,
        AppProductsProductIdManageRemoveAssociatedProductAssociatedProductIdRouteRoute,
        AppProductsProductIdManageStockHistoryStockIdRouteRoute,
        AppProductsProductIdManageUpdateSpecificationSpecificationIdRouteRoute,
        AppProductsProductIdManageUpdateStockStockIdRouteRoute,
        AppProductsProductIdManageUpdateVersionVersionIdRouteRoute,
      ]),
      AppProductsProductIdIndexRoute,
    ]),
  ]),
  AuthRouteRoute.addChildren([
    AuthForgotPasswordRouteLazyRoute,
    AuthLoginRouteLazyRoute,
    AuthIndexRoute,
    AuthResetPasswordTokenRouteLazyRoute,
  ]),
])

/* prettier-ignore-end */
